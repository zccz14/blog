{"data":{"markdownRemark":{"frontmatter":{"title":"技能树可视化","date":"21 January 2017","path":"/skill-tree-visualization","author":null,"excerpt":null,"tags":["Design"],"coverImage":null},"id":"8578edc0-c73c-519a-801e-11a0e6bf5824","html":"<p>关于自身的能力，很多地方都会提到一个词——<strong>技能树</strong>。</p>\n<p>技能树是指个人技能的集合，包含个人掌握的各项技能；同时强调其树形结构，有明显的归属关系；并且每个节点具有权值，致使父节点也具有一个权值；结构随时间变化，历史数据也具有参考价值，因此最好是一个可持久化数据结构。</p>\n<p>现讨论其可视化形式，给人一个直观的感受。</p>\n<h1>表达形式</h1>\n<ul>\n<li>表现个人技能的全集、偏好</li>\n<li>表现个人技能的专业度(Proficiency)</li>\n<li>表现个人技能的变更历史</li>\n</ul>\n<h1>技能变更</h1>\n<p>什么引起了技能的变更？</p>\n<ul>\n<li>时间流逝带来技能的衰退</li>\n<li>经常使用技能会变得熟练</li>\n<li>学习技能会开拓新的节点</li>\n<li>触类旁通能造成联动效应</li>\n</ul>\n<p>借用 Redux 的理论，技能树是一个 Store，产生 Action 并经由 Reducer 改变 Store 的值。</p>\n<p>每个 Action 都会使得我们构造出一个新的 Store，用可持久化数据结构去维护这个 Store 我们就得到了一个可以回滚的技能树。</p>\n<p>既然技能树应该由 Action 经过 Reduce 得到，我们就应该只需要记录 Action 而由程序生成完整的技能树。</p>\n<p>那么 Action 应该包含什么？</p>\n<ul>\n<li>\n<p>Action 产生的时间</p>\n<p>时间在技能树的历史参考中具有重要的意义。</p>\n<p>但是你可能不记得你之前经历过的事件的准确时间，甚至连是否经历过都已经遗忘。</p>\n<blockquote>\n<p>由此观之，人自身也有一个 Reduce 机制，如果我们不记录 Action，它们就会遗失。</p>\n</blockquote>\n<p>不过没关系，我们可以用一个等价 Action 来代替这些未观测的 Actions。</p>\n</li>\n<li>\n<p>Action 的内容</p>\n<p>地点、人物、起因、经过、结果？加上时间就是“记叙文六要素”。</p>\n<blockquote>\n<p>没错，Action 就是记叙文。</p>\n</blockquote>\n<p>我们真的可以通过写记叙文，或者说日记的形式来跟踪我们的技能变更吗？</p>\n<p><strong>可以，但很难。</strong>显然从自然语言书写的文章中处理分析出关键信息是比较困难的，涉及到<strong>自然语言处理</strong>的相关知识，但这里可以先保留这个机制接入的途径，而不讨论它具体的实现。这里相当于声明了 Action Creator 接口。</p>\n<p>从<strong>方便实现</strong>的角度来看，我们更倾向于<strong>建立模式，用表单收集数据</strong>的方式，用户可以选择合适的表单，通过几个简明的表单项来创建一个 Action。这是上述 Action Creator 接口的一种简单实现。</p>\n<p>预先研究并定义 Action 的<strong>类型</strong>，然后采用固定的逻辑进行 Reduce。（Action Type 设计）</p>\n<p>例如：</p>\n<ul>\n<li>时间段 Timespan</li>\n</ul>\n<p>在一段较长的时间内，例如在某个公司任职或做某个项目时，可能高频率地使用某项技能。我们可以只在这段时间的开始与结束时创建 Action。这避免了我们每天都要记日记，有时忙起来还会忘记的窘境。</p>\n<p>从功能上说，我们可以据此分析个人某项技能的增长与衰退。</p>\n<p>具体使用什么模型来 Reduce 暂时待定，个人想法暂时比较简单，<strong>持续时间段的开始</strong>标志着<strong>相关技能自然衰退</strong>的停止，持续时间段的<strong>长度</strong>与相关技能的<strong>专业度的增量呈正相关</strong>……</p>\n<ul>\n<li>评测 Test</li>\n</ul>\n<p>例如测验、考试等评测事件，会对个人技能认知产生巨大的影响。而且现实是很多人也<strong>只能</strong>通过评测事件来了解自己的姿势水平。</p>\n<p>评测类 Action 可以被很容易地 Reduce，特别是给出分数的考试。</p>\n<ul>\n<li>反思 Reflection</li>\n</ul>\n<p>人类是一种能通过反思，不借助新的外界输入便能进步的生物。真是神奇，我坐在房间里，也没有阅读什么资料，凭空就想出了这篇文章。</p>\n<p>我们尽量<strong>避免对生活的过度记录</strong>，一方面过小的 Action 影响不大，另一方面记录本身太浪费时间反而降低了生活效率。另外多个小 Actions 完全可以等价代换成另外一个较大体量的<strong>等效 Action</strong>。</p>\n</li>\n</ul>\n<p>记录 Action 流而不是直接提供技能树数据出于几个考虑：</p>\n<ul>\n<li>\n<p>标准一致性</p>\n<p>通常你很难量化你的技能的专业度，凭感觉估计自己的专业度是一件很主观的事情。</p>\n<p>而利用 Action + Reduce 的机制我们可以站在一个相对客观的角度去评价自己。</p>\n<p>同时也降低了系统的耦合度，变更标准时只需要变更 Reducer 的实现即可。</p>\n</li>\n<li>\n<p>自动技能分解</p>\n<p>我们需要尽量地分解技能，又不至于过于琐碎，便于我们估计。</p>\n<p>类比项目管理中的 WBS 概念，这里也可以建立一个 SBS 技能分解结构的概念，它们的性质与功能是非常相似的。</p>\n<p>你可以手动分解你的技能，但我更倾向于直接从 Action 流中建立这个结构。</p>\n<p>手动目录与自动目录，你更喜欢哪个？</p>\n</li>\n</ul>","excerpt":"…"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"type":"posts","next":{"frontmatter":{"path":"/Saiki-Kusuo-no-Sainan","title":"齐木楠雄的灾难","tags":["Bangumi"]},"fileAbsolutePath":"C:/Users/zccz14/projects/new-blog/src/posts/2016/12/Saiki-Kusuo-no-Sainan.md"},"previous":{"frontmatter":{"path":"/technical-indicators-in-quant-system","title":"量化系统的技术指标","tags":["Design"]},"fileAbsolutePath":"C:/Users/zccz14/projects/new-blog/src/posts/2017/02/technical-indicators-in-quant-system.md"}}}